---
import { cartItems } from "@/store/cart";
---

<header
  class="sticky top-0 left-0 w-full bg-white p-3 sm:p-5 border-b border-gray-200 z-50"
>
  <div
    class="absolute top-0 left-0 w-full h-1 bg-gradient-to-t from-gray-200 to-red-600"
  >
  </div>
  <nav>
    <ul class="flex items-center justify-around">
      <li>
        <a href="/">
          <span class="text-red-500 mr-1">←</span> Volver
        </a>
      </li>
      <li>
        <a href="/">
          <img src="./images/NeonVibe.webp" alt="NeonVibe Logo" width="90px" />
        </a>
      </li>
      <li class="relative flex items-center">
        <a href="/carrito">
          <span
            class="relative top-1 left-6 bg-white text-black rounded-full w-4 h-4 flex items-center justify-center text-xs cart-count"
          >
            0
          </span>
          <img src="/svg/carrito.svg" alt="IconCarrito" class="w-7 h-7" />
        </a>
      </li>
    </ul>
  </nav>
</header>

<script>
  import { cartItems } from "../store/cart";
  import type { CartItem } from "../store/cart";

  // Función para actualizar el contador
  const updateCartCount = () => {
    const cartCount = document.querySelector(".cart-count");
    if (cartCount) {
      try {
        const items = JSON.parse(
          localStorage.getItem("cartItems") || "[]"
        ) as CartItem[];
        cartCount.textContent = items
          .reduce((total: number, item: CartItem) => total + item.quantity, 0)
          .toString();
      } catch (error) {
        console.error("Error updating cart count:", error);
      }
    }
  };

  // Función para inicializar el store con los items del localStorage
  const initializeCartStore = () => {
    try {
      const storedItems = localStorage.getItem("cartItems");
      if (storedItems) {
        cartItems.set(JSON.parse(storedItems) as CartItem[]);
      }
    } catch (error) {
      console.error("Error initializing cart store:", error);
    }
  };

  // Actualizar cuando el DOM está listo y en cada navegación
  document.addEventListener("astro:page-load", () => {
    initializeCartStore();
    updateCartCount();

    // Suscribirse a cambios en el store
    cartItems.subscribe((items) => {
      const cartCount = document.querySelector(".cart-count");
      if (cartCount) {
        cartCount.textContent = items
          .reduce((total: number, item: CartItem) => total + item.quantity, 0)
          .toString();
      }
    });
  });
</script>
